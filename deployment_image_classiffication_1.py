# -*- coding: utf-8 -*-
"""deployment image classiffication-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/sintiasnn/example/blob/main/deployment_image_classiffication_1.ipynb

Nama : Ni Putu Sintia Wati <br>
email : sintiawati.putu04@gmail.com
"""

from google.colab import drive
drive.mount('/content/drive')

import zipfile,os
local_zip = '/content/drive/MyDrive/satellite-image-classification.zip'
zip_ref = zipfile.ZipFile(local_zip,'r')
zip_ref.extractall('/content')
zip_ref.close()

base_dir = '/content/data'
train_dir = os.path.join(base_dir, 'train')
validation_dir = os.path.join(base_dir, 'val')

train_data = os.path.join(base_dir, "cloudy", "desert", "green_area", "water")
validation_data = os.path.join(base_dir, "cloudy", "desert", "green_area", "water")
test_data = os.path.join(base_dir, "cloudy", "desert", "green_area", "water")

from tensorflow.keras.preprocessing.image import ImageDataGenerator
 
train_data_generator = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=30,
                    horizontal_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'nearest',
                    validation_split=0.2,)
 
# val_data_generator = ImageDataGenerator(
#                     rescale=1./255,
#                     rotation_range=23,
#                     horizontal_flip=True,
#                     shear_range = 0.2,
#                     fill_mode = 'nearest',
#                     validation_split=0.2)

training_generator = train_data_generator.flow_from_directory(
        base_dir,  
        target_size=(150, 150),
        color_mode = "rgb",
        class_mode = "categorical",
        batch_size = 16, 
        seed = 0, 
        shuffle = True,
        subset='training')
 
validation_generator = train_data_generator.flow_from_directory(
        base_dir, 
        target_size=(150, 150),  
        color_mode = "rgb",
        class_mode = "categorical",
        seed = 0,
        shuffle = False,
        subset='validation')

# melakukan augmentasi gambar

import tensorflow as tf
model = tf.keras.models.Sequential([
                                    tf.keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(150, 150, 3)),
                                    tf.keras.layers.MaxPooling2D(2,2),
                                    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
                                    tf.keras.layers.MaxPooling2D(2,2),
                                    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
                                    tf.keras.layers.MaxPooling2D(2,2),
                                    tf.keras.layers.Flatten(),
                                    tf.keras.layers.Dropout(0.2),
                                    tf.keras.layers.Dense(128, activation='relu'),
                                    tf.keras.layers.Dense(4, activation='softmax')
])
model.summary()

model.compile(loss='categorical_crossentropy',
              optimizer= tf.optimizers.Adam(learning_rate=0.001),
              metrics=['accuracy'])

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy') > 0.85 and logs.get('val_accuracy') > 0.85):
      print("\nAkurasi telah mencapai > 85%")
      self.model.stop_training = True

callbacks = myCallback()

history = model.fit(
      training_generator,
      steps_per_epoch=100,
      epochs=20, 
      validation_data=validation_generator, 
      validation_steps=2,  
      verbose=2,
      callbacks = [callbacks]
      )

import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['training_generator', 'validation_generator'], loc='upper left')
plt.show()

import matplotlib.pyplot as plt

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['training_generator', 'validation_generator'], loc='upper left')
plt.show()

# import numpy as np
# from google.colab import files
# from keras.preprocessing import image
# import matplotlib.pyplot as plt
# import matplotlib.image as mpimg
# %matplotlib inline
 
# uploaded = files.upload()
 
# for fn in uploaded.keys():
 
#   # memprediksi gambar
#   path = fn
#   img = image.load_img(path, target_size=(150,150))
#   imgplot = plt.imshow(img)
#   x = image.img_to_array(img)
#   x = np.expand_dims(x, axis=0)
 
#   images = np.vstack([x])
#   classes = model.predict(images, batch_size=10)
 
#   print("\n")
#   print('Hasil Prediksi : ',classes[0],'\n')
  
#   print(fn)
#   if classes[0][0] == 1:
#     print( "cloudy")
#   elif classes[0][1] == 1:
#     print("desert")
#   elif classess[0][2] == 1 :
#     print("green_area")
#   else :
#     print("water")

# # save using TFlite
# import tensorflow as tf

# converter = tf.lite.TFLiteConverter.from_keras_model(model)
# tflite_model = converter.convert()

# with open('RPS_model.tflite', 'wb') as f:
#   f.write(tflite_model)

model.save('model-example.h5')